<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('translation_values', function (Blueprint $table) {
            $table->id();
            
            // Core Translation Relationship
            $table->foreignId('translation_key_id')->constrained('translation_keys')->cascadeOnDelete();
            $table->foreignId('language_id')->constrained('languages')->cascadeOnDelete();
            
            // Translation Content
            $table->text('value'); // The actual translation
            $table->text('value_html')->nullable(); // HTML version if different from plain text
            $table->json('plural_forms')->nullable(); // For languages with complex plurals
            
            // Quality & Status
            $table->enum('status', ['draft', 'review', 'approved', 'published'])->default('draft');
            $table->boolean('is_verified')->default(false); // Verified by native speaker
            $table->boolean('is_ai_generated')->default(false); // Generated by AI
            $table->boolean('needs_review')->default(false); // Flagged for review
            $table->integer('quality_score')->nullable(); // 1-10 quality rating
            
            // Context & Usage
            $table->text('context_note')->nullable(); // Translator's context note
            $table->text('usage_example')->nullable(); // How it's used in context
            $table->string('screenshot_url')->nullable(); // Screenshot showing usage
            
            // Version Control & History
            $table->integer('version')->default(1); // Version number of this translation
            $table->text('change_reason')->nullable(); // Why this was changed
            $table->json('revision_history')->nullable(); // Previous versions
            
            // Character & Length Information  
            $table->integer('character_count')->default(0); // Cached character count
            $table->integer('word_count')->default(0); // Cached word count
            $table->boolean('exceeds_limit')->default(false); // Exceeds UI character limit
            
            // Translation Metadata
            $table->string('translator_name', 100)->nullable(); // Who translated this
            $table->string('translator_email', 150)->nullable(); // Translator contact
            $table->timestamp('translated_at')->nullable(); // When translated
            $table->timestamp('reviewed_at')->nullable(); // When reviewed
            $table->timestamp('approved_at')->nullable(); // When approved
            
            // Management
            $table->unsignedBigInteger('created_by')->nullable(); // Admin who added this
            $table->unsignedBigInteger('updated_by')->nullable(); // Admin who last updated
            $table->unsignedBigInteger('reviewed_by')->nullable(); // Who reviewed this
            $table->unsignedBigInteger('approved_by')->nullable(); // Who approved this
            
            // Additional Data
            $table->json('variables_used')->nullable(); // Which variables are used
            $table->text('notes')->nullable(); // Internal notes
            $table->json('metadata')->nullable(); // Flexible additional data
            
            $table->timestamps();
            
            // Indexes for performance
            $table->index(['translation_key_id', 'language_id']);
            $table->index(['language_id', 'status']);
            $table->index(['status', 'needs_review']);
            $table->index('is_verified');
            $table->index('quality_score');
            $table->index('version');
            
            // Unique constraint - one translation per key per language per version
            $table->unique(['translation_key_id', 'language_id', 'version'], 'unique_translation_version');
            
            // Foreign keys
            $table->foreign('created_by')->references('id')->on('admin_users')->nullOnDelete();
            $table->foreign('updated_by')->references('id')->on('admin_users')->nullOnDelete();
            $table->foreign('reviewed_by')->references('id')->on('admin_users')->nullOnDelete();
            $table->foreign('approved_by')->references('id')->on('admin_users')->nullOnDelete();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('translation_values');
    }
};
